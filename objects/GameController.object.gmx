<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar mapController;
mapController = id;

globalvar MapNodeList;

globalvar playerMarker;

globalvar moveToNode; //globalvar of node we're moving to

globalvar nodePlayerIsAt; //Node player is on when he starts a battle and/or radio. This is persistent

globalvar battleMapPlayerIsAt;

globalvar radText;
radText = "";
globalvar radFace;
radFace = 0;

//Players' Money
//Will need to load this from save file at some point
globalvar player1Money;
player1Money = 1000;
globalvar player2Money;
player2Money = 1000;
globalvar player3Money;
player3Money = 1000;
globalvar player4Money;
player4Money = 1000;

//Controller analogue stick direction correction tracker
globalvar controllerDirection;
for(i=0; i&lt;4; i++)
{   for(j=0; j&lt;4; j++)
    {   controllerDirection[i,j] = 0;
    }   
}

//Player's current loadout
//player1
globalvar playerLoadOut1;
playerLoadOut1[0] = 0; //Head
playerLoadOut1[1] = 0; //Torso
playerLoadOut1[2] = 0; //Left Arm
playerLoadOut1[3] = 0; //Right Arm
playerLoadOut1[4] = 0; //Legs

//player2
globalvar playerLoadOut2;
playerLoadOut2[0] = 0; //Head
playerLoadOut2[1] = 0; //Torso
playerLoadOut2[2] = 0; //Left Arm
playerLoadOut2[3] = 0; //Right Arm
playerLoadOut2[4] = 0; //Legs

//player1
globalvar playerLoadOut3;
playerLoadOut3[0] = 0; //Head
playerLoadOut3[1] = 0; //Torso
playerLoadOut3[2] = 0; //Left Arm
playerLoadOut3[3] = 0; //Right Arm
playerLoadOut3[4] = 0; //Legs

//player1
globalvar playerLoadOut4;
playerLoadOut4[0] = 0; //Head
playerLoadOut4[1] = 0; //Torso
playerLoadOut4[2] = 0; //Left Arm
playerLoadOut4[3] = 0; //Right Arm
playerLoadOut4[4] = 0; //Legs

//Colors
globalvar playerColors;
//Player 1 Default Colors...
playerColors[0,0] = 0; //hue Prime
playerColors[0,1] = 255; //sat Prime
playerColors[0,2] = 255; //val Prime
playerColors[0,3] = 0; //hue Secondary
playerColors[0,4] = 0; //sat Secondary
playerColors[0,5] = 100; //val Secondary
playerColors[0,6] = 15; //hue Energy
playerColors[0,7] = 255; //sat Energy
playerColors[0,8] = 255; //val Energy
//Player 2 Default Colors...
playerColors[1,0] = 70; //hue Prime
playerColors[1,1] = 255; //sat Prime
playerColors[1,2] = 255; //val Prime
playerColors[1,3] = 70; //hue Secondary
playerColors[1,4] = 0; //sat Secondary
playerColors[1,5] = 150; //val Secondary
playerColors[1,6] = 75; //hue Energy
playerColors[1,7] = 255; //sat Energy
playerColors[1,8] = 255; //val Energy
//Player 3 Default Colors...
playerColors[2,0] = 140; //hue Prime
playerColors[2,1] = 255; //sat Prime
playerColors[2,2] = 255; //val Prime
playerColors[2,3] = 140; //hue Secondary
playerColors[2,4] = 0; //sat Secondary
playerColors[2,5] = 200; //val Secondary
playerColors[2,6] = 150; //hue Energy
playerColors[2,7] = 255; //sat Energy
playerColors[2,8] = 255; //val Energy
//Player 4 Default Colors...
playerColors[3,0] = 210; //hue Prime
playerColors[3,1] = 255; //sat Prime
playerColors[3,2] = 255; //val Prime
playerColors[3,3] = 210; //hue Secondary
playerColors[3,4] = 0; //sat Secondary
playerColors[3,5] = 255; //val Secondary
playerColors[3,6] = 225; //hue Energy
playerColors[3,7] = 255; //sat Energy
playerColors[3,8] = 255; //val Energy

//Inventory Lists
globalvar HeadInventory;
HeadInventory = ds_list_create();

globalvar TorsoInventory;
TorsoInventory = ds_list_create();

globalvar ArmInventory;
ArmInventory = ds_list_create();

globalvar LegsInventory;
LegsInventory = ds_list_create();

globalvar BackPackInventory;
BackPackInventory = ds_list_create();

//Testing the huge item array
//Seems like the best way to do it, even though its crazy stupid
globalvar ItemArray;
ItemArray[0] = instance_create(0, 0, ProtoHeadObjectItem);
ItemArray[1] = instance_create(0, 0, ProtoTorsoObjectItem);
ItemArray[2] = instance_create(0, 0, ProtoSwordObjectItem);
ItemArray[3] = instance_create(0, 0, ProtoGunObjectItem);
ItemArray[4] = instance_create(0, 0, ProtoLegsObjectItem);
ItemArray[6] = instance_create(0, 0, testBackPackObject1);
ItemArray[7] = instance_create(0, 0, AuraH);
ItemArray[8] = instance_create(0, 0, HyperionHelios);
ItemArray[9] = instance_create(0, 0, CriusAstraeus);
ItemArray[10] = instance_create(0, 0, PheobeLelantos);
ItemArray[11] = instance_create(0, 0, CronusH);
ItemArray[12] = instance_create(0, 0, HyperionHeliosMkII);
ItemArray[13] = instance_create(0, 0, AuraT);
ItemArray[14] = instance_create(0, 0, HyperionEos);
ItemArray[15] = instance_create(0, 0, CriusPallas);
ItemArray[16] = instance_create(0, 0, CoeusLelantos);
ItemArray[17] = instance_create(0, 0, CronusT);
ItemArray[18] = instance_create(0, 0, HyperionEosMkII);
ItemArray[20] = instance_create(0, 0, AuraL);
ItemArray[21] = instance_create(0, 0, HyperionSelene);
ItemArray[22] = instance_create(0, 0, CriusPerses);
ItemArray[23] = instance_create(0, 0, LelantosAura);
ItemArray[24] = instance_create(0, 0, CronusL);
ItemArray[25] = instance_create(0, 0, HyperionSeleneMkII);
ItemArray[26] = instance_create(0, 0, ThePointer);
ItemArray[27] = instance_create(0, 0, CronusSeismos);
ItemArray[28] = instance_create(0, 0, HermesRhipto);
ItemArray[29] = instance_create(0, 0, VulcanPistol);
ItemArray[30] = instance_create(0, 0, EnyoGat);
ItemArray[31] = instance_create(0, 0, ArtemisML);
ItemArray[32] = instance_create(0, 0, HephaestusCannon);
ItemArray[33] = instance_create(0, 0, HermesMG);
ItemArray[34] = instance_create(0, 0, MinervaML);
ItemArray[35] = instance_create(0, 0, ApolloPiras);
ItemArray[36] = instance_create(0, 0, ErisRhipto);
ItemArray[37] = instance_create(0, 0, AetherFoil);
ItemArray[38] = instance_create(0, 0, AthenaBroadsword);
ItemArray[39] = instance_create(0, 0, AresEdge);
ItemArray[40] = instance_create(0, 0, ChronosFist);
ItemArray[41] = instance_create(0, 0, ZeusArm);
ItemArray[42] = instance_create(0, 0, HadesAxe);
ItemArray[43] = instance_create(0, 0, GaiaHammer);

//Will probably do something here to read a save file and load inventory, for now, test inventory

ds_list_add(HeadInventory, ProtoHeadObjectItem);
ds_list_add(TorsoInventory, ProtoTorsoObjectItem);
ds_list_add(ArmInventory, ProtoSwordObjectItem);
ds_list_add(ArmInventory, ProtoGunObjectItem);
ds_list_add(LegsInventory, ProtoLegsObjectItem);
ds_list_add(BackPackInventory, testBackPackObject1);
ds_list_add(HeadInventory, AuraH);
ds_list_add(HeadInventory, HyperionHelios);
ds_list_add(HeadInventory, CriusAstraeus);
ds_list_add(HeadInventory, PheobeLelantos);
ds_list_add(HeadInventory, CronusH);
ds_list_add(HeadInventory, HyperionHeliosMkII);
ds_list_add(TorsoInventory, AuraT);
ds_list_add(TorsoInventory, HyperionEos);
ds_list_add(TorsoInventory, CriusPallas);
ds_list_add(TorsoInventory, CoeusLelantos);
ds_list_add(TorsoInventory, CronusT);
ds_list_add(TorsoInventory, HyperionEosMkII);
ds_list_add(LegsInventory, AuraL);
ds_list_add(LegsInventory, HyperionSelene);
ds_list_add(LegsInventory, CriusPerses);
ds_list_add(LegsInventory, LelantosAura);
ds_list_add(LegsInventory, CronusL);
ds_list_add(LegsInventory, HyperionSeleneMkII);
ds_list_add(ArmInventory, ThePointer);
ds_list_add(ArmInventory, CronusSeismos);
ds_list_add(ArmInventory, HermesRhipto);
ds_list_add(ArmInventory, VulcanPistol);
ds_list_add(ArmInventory, EnyoGat);
ds_list_add(ArmInventory, ArtemisML);
ds_list_add(ArmInventory, HephaestusCannon);
ds_list_add(ArmInventory, HermesMG);
ds_list_add(ArmInventory, MinervaML);
ds_list_add(ArmInventory, ApolloPiras);
ds_list_add(ArmInventory, ErisRhipto);
ds_list_add(ArmInventory, AetherFoil);
ds_list_add(ArmInventory, AthenaBroadsword);
ds_list_add(ArmInventory, AresEdge);
ds_list_add(ArmInventory, ChronosFist);
ds_list_add(ArmInventory, ZeusArm);
ds_list_add(ArmInventory, HadesAxe);
ds_list_add(ArmInventory, GaiaHammer);

//Add in items to default inventory
//PLAYER1 INVENTORY
playerLoadOut1[0] = ds_list_find_value(HeadInventory, 0); //Head
playerLoadOut1[1] = ds_list_find_value(TorsoInventory, 0); //Torso
playerLoadOut1[2] = ds_list_find_value(ArmInventory, 0); //Left Arm
playerLoadOut1[3] = ds_list_find_value(ArmInventory, 1); //Right Arm
playerLoadOut1[4] = ds_list_find_value(LegsInventory, 0); //Legs
playerLoadOut1[5] = ds_list_find_value(BackPackInventory, 0); //BackPack

//PLAYER2 INVENTORY
playerLoadOut2[0] = ds_list_find_value(HeadInventory, 0); //Head
playerLoadOut2[1] = ds_list_find_value(TorsoInventory, 0); //Torso
playerLoadOut2[2] = ds_list_find_value(ArmInventory, 0); //Left Arm
playerLoadOut2[3] = ds_list_find_value(ArmInventory, 1); //Right Arm
playerLoadOut2[4] = ds_list_find_value(LegsInventory, 0); //Legs
playerLoadOut2[5] = ds_list_find_value(BackPackInventory, 0); //BackPack

//PLAYER3 INVENTORY
playerLoadOut3[0] = ds_list_find_value(HeadInventory, 0); //Head
playerLoadOut3[1] = ds_list_find_value(TorsoInventory, 0); //Torso
playerLoadOut3[2] = ds_list_find_value(ArmInventory, 0); //Left Arm
playerLoadOut3[3] = ds_list_find_value(ArmInventory, 1); //Right Arm
playerLoadOut3[4] = ds_list_find_value(LegsInventory, 0); //Legs
playerLoadOut3[5] = ds_list_find_value(BackPackInventory, 0); //BackPack

//PLAYER4 INVENTORY
playerLoadOut4[0] = ds_list_find_value(HeadInventory, 0); //Head
playerLoadOut4[1] = ds_list_find_value(TorsoInventory, 0); //Torso
playerLoadOut4[2] = ds_list_find_value(ArmInventory, 0); //Left Arm
playerLoadOut4[3] = ds_list_find_value(ArmInventory, 1); //Right Arm
playerLoadOut4[4] = ds_list_find_value(LegsInventory, 0); //Legs
playerLoadOut4[5] = ds_list_find_value(BackPackInventory, 0); //BackPack

//MULTIPLAYER SETTINGS OBJECTS (Initialized with defaults)

globalvar numPlayersSetting;
numPlayersSetting = 2;

globalvar numCPUsSetting;
numCPUsSetting = 0;

globalvar timeLimitSetting;
timeLimitSetting = 999;

globalvar livesSetting;
livesSetting = 999;

globalvar creditLimitSetting;
creditLimitSetting = 1000;

globalvar startBattleVar;
startBattleVar[0] = 4;//numPlayers;
startBattleVar[1] = 0;//numCPUs;
startBattleVar[2] = testRange;//newRoom;

/***************************************************
  Player Colors
    Added by Elliot Coy - Feb 13 9PM
 ***************************************************/

globalvar hue_prime;
globalvar sat_prime;
globalvar val_prime;
hue_prime = 100;
sat_prime = 0;
val_prime = 100;
globalvar hue_2;
globalvar sat_2;
globalvar val_2;
hue_2 = 100;
sat_2 = 0;
val_2 = 100;
globalvar hue_glow;
globalvar sat_glow;
globalvar val_glow;
hue_glow = 100;
sat_glow = 0;
val_glow = 100;

//TODO - more for players, and maybe robots.

//side note... 
    //need a method of coloring players,
    //computer palyers, and parts, from within
    //part objects. Otherwise everyplayer will
    //need their own armor objects...

/***************************************************
  END Player Colors
 ***************************************************/
 
//used during playercreation. Resets every player
//creation for use for new players.

globalvar playerNumCreate;
playerNumCreate = 0; //default value
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This alarm gets called to unlock nodes that the player is on
unlockNodes(MapNodeList[nodePlayerIsAt]);
alarm[10] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set each controller axis state for check_pressed to have something to compare too.
//meant to fix the million presses per second bug
for(i=0; i&lt;4; i++)
{   //left horizontal axis
    controllerDirection[i,0] = gamepad_axis_value(i, gp_axislh);
    //left vertical axis
    controllerDirection[i,1] = gamepad_axis_value(i, gp_axislv);
    //right horizontal axis
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(shield_check_pressed())
{
    if(room == InventoryRoom)
    {
        //if in inventory screen and looking through items to select
        if(view_visible[1])
        {
            view_visible[1] = false;
            lookingAtItems = false;
            selectedInventory = -1;
            inventoryArray = destroyArray(inventoryArray);
        }
        else 
        {
            room_goto(OverMap);
        }
    }
}

if(attack2_check_pressed())
{
    if(room == OverMap)
    {
        room_goto(InventoryRoom);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(room == OverMap)
{
    room_goto(InventoryRoom);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="66">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(room == InventoryRoom)
{
    //if in inventory screen and looking through items to select
    if(view_visible[1])
    {
        view_visible[1] = false;
        lookingAtItems = false;
        selectedInventory = -1;
        inventoryArray = destroyArray(inventoryArray);
    }
    else 
    {
        room_goto(OverMap);
    }
}*/
/*else 
{
    room_goto(OverMap);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
