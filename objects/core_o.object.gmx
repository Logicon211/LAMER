<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>core_s</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player = instance_nearest(x,y,player_o);
lefthalf = 62;
righthalf = 66;

//create boosters
booster1 = instance_create(x,y,booster_o);
booster2 = instance_create(x,y,booster_o);
booster3 = instance_create(x,y,booster_o);

/***************************************************
  Create Legs
 ***************************************************/
leg1=instance_create(x,y,leg_o);
leg1.depth=depth+2
leg1.me = 1;
if(leg1.legnums=2)
{
    leg2 = instance_create(x,y,leg_o);
    leg2.depth = depth-1;
    leg2.me = 2;
    legnums = 2;
}
else if(leg1.legnums=4)
{
    leg2 = instance_create(x,y,leg_o);
    leg2.depth = depth-1;
    leg2.me = 2;
    leg3 = instance_create(x,y,leg_o);
    leg3.depth = depth-2;
    leg3.me = 2;
    leg4 = instance_create(x,y,leg_o);
    leg4.depth = depth+3;
    leg4.me = 2;
    legnums = 4;
}

/***************************************************
  END Create Legs
 ***************************************************/

//Create Head
head = instance_create(x,y,head_o);
//END Create Head

//Create Arm1
arm1 = instance_create(x,y,arm_o);
arm1.depth = depth-2;
//END Create Arm1

//Create Arm2
arm2 = instance_create(x,y,proto_gun_o);
arm2.depth = depth+4;
//END Create Arm2

/***************************************************
  Set Height
 ***************************************************/
headheight = head.sprite_height;
legheight = leg1.sprite_height;
height = head.sprite_height+leg1.sprite_height+sprite_height;

attack1 = false;
attack2 = false;
attack1_type = arm1.attack_type;
attack2_type = arm2.attack_type;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/***************************************************
  Limbs Follow Player
 ***************************************************/

/***************************************************
  Universal State
 ***************************************************/
 
  //Legs Follow
    legvar=(sin(degtorad(x*1.4)));
    legxy=rotation_tracker(x,y,image_angle,x,y+30);
    leg_follow_universal(leg1,legxy);
    leg_follow_universal(leg2,legxy);    
  //END Legs Follow
  
  //Arms Follow
    arm1.vspeed=vspeed;
    arm1.hspeed=hspeed;
    arm2.vspeed=vspeed;
    arm2.hspeed=hspeed;
  //END Arms Follow

  
/***************************************************
  END Universal State
 ***************************************************/  
  
/***************************************************
  Normal State
 ***************************************************/

if(player.state = string('normal'))
{
    head.image_angle = 2*image_angle/3;
    arm_follow(arm1);
    arm_follow_gun(arm2);
    if(player.boosting || player.airborne)  //jumping/boosting
    {
        leg1.image_angle = angle_ease(leg1.image_angle,image_angle-5,8);
        leg2.image_angle = angle_ease(leg2.image_angle,image_angle+5,8);
    }
    else if(player.walking)                 //walking
    {
        leg1.image_angle = angle_ease(leg1.image_angle,40*legvar,3);
        leg2.image_angle = angle_ease(leg2.image_angle,-40*legvar,3);
    }
    else                                    //idle
    {
        leg1.image_angle = angle_ease(leg1.image_angle,-5*image_xscale,8);
        leg2.image_angle = angle_ease(leg2.image_angle,15*image_xscale,8);
    }
}

/***************************************************
  END Normal State
 ***************************************************/
 
 /***************************************************
  ToNormal State
 ***************************************************/
 
if(player.state = string('tonorm'))
{
    head.image_angle = angle_ease(head.image_angle,2*image_angle/3,4);
    arm_follow(arm1);
    arm_follow_gun(arm2);
    if(player.boosting || player.airborne)  //jumping/boosting
    {
        leg1.image_angle = angle_ease8(leg1.image_angle,image_angle-5);
        leg2.image_angle = angle_ease8(leg2.image_angle,image_angle+5);
    }
    else if(player.walking)                 //walking
    {
        leg1.image_angle = angle_ease(leg1.image_angle,40*legvar,3);
        leg2.image_angle = angle_ease(leg2.image_angle,-40*legvar,3);
    }
    else                                    //idle
    {
        leg1.image_angle = angle_ease8(leg1.image_angle,-5*image_xscale);
        leg2.image_angle = angle_ease8(leg2.image_angle,15*image_xscale);
    }
}

/***************************************************
  END ToNormal State
 ***************************************************/

/***************************************************
  Shield State
 ***************************************************/    
 
if(player.state = string('shield'))
{
    head.image_angle = angle_ease(head.image_angle,-45*image_xscale,8);
    arm1_follow_shield(arm1);
    arm2_follow_shield(arm2);
    leg1.image_angle = angle_ease8(leg1.image_angle,-10*image_xscale);
    leg2.image_angle = angle_ease8(leg2.image_angle,75*image_xscale);
    attack1 = false;
    attack2 = false;
}

/***************************************************
  END Shield State
 ***************************************************/

//head follow
headxy=rotation_tracker_boost(x,y,image_angle,180,x-5,y-15);
head.x = headxy[0];
head.y = headxy[1];
head.image_xscale = image_xscale;
head.vspeed=vspeed;
head.hspeed=hspeed;
//END head follow

/***************************************************
  END Limbs Follow Player
 ***************************************************/
 
/***************************************************
  Booster Follow
 ***************************************************/
 
ret = rotation_tracker_boost(x,y,image_angle,-129,x,y+73);
booster1.x = ret[0];
booster1.y = ret[1];
booster1.vspeed = vspeed;
booster1.hspeed = hspeed;
ret = rotation_tracker_boost(x,y,image_angle,-100,x,y+62);
booster2.x = ret[0];
booster2.y = ret[1];
booster2.vspeed = vspeed;
booster2.hspeed = hspeed;
ret = rotation_tracker_boost(x,y,image_angle,-57,x,y+64);
booster3.x = ret[0];
booster3.y = ret[1];
booster3.vspeed = vspeed;
booster3.hspeed = hspeed;
//end booster follow

if(player.boosting)
{
    booster1.boosting = true;
    booster2.boosting = true;
    booster3.boosting = true;
}
else
{
    booster1.boosting = false;
    booster2.boosting = false;
    booster3.boosting = false;
}
 
/***************************************************
  END Booster Follow
 ***************************************************/
 
/***************************************************
  Attack State Handling
 ***************************************************/

if(attack1 || arm1.isAttacking){ attack_set_1(arm1,attack1_type,1,arm2,arm1.lowerarm); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,0,x,y,image_xscale,image_yscale,image_angle,make_color_hsv(hue_2,sat_2,val_2),image_alpha);
draw_sprite_ext(sprite_index,1,x,y,image_xscale,image_yscale,image_angle,make_color_hsv(hue_prime,sat_prime,val_prime),image_alpha);
draw_sprite_ext(sprite_index,2,x,y,image_xscale,image_yscale,image_angle,make_color_hsv(hue_2,sat_2,val_2),image_alpha);
draw_sprite_ext(sprite_index,3,x,y,image_xscale,image_yscale,image_angle,make_color_hsv(hue_prime,sat_prime,val_prime),image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>126,135</point>
    <point>128,128</point>
  </PhysicsShapePoints>
</object>
