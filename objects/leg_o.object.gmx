<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>leg_su</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>legnums=2;
me=0;
player=instance_nearest(x,y,player_o);
setdepth=false;
lower_leg = instance_create(x,y,leg_o2);
lower_leg.depth = depth-1;
vspeedvar = 0;
hspeedvar = 0;
lower_angle = 1000;//used during attack animations to set lower leg position
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>joint = rotation_tracker(x,y,image_angle,x-1,y+56)
limb_anchor(lower_leg,joint[0],joint[1],hspeed,vspeed,image_xscale)

/***************************************************
  Angled States
 ***************************************************/

//Jump State
if(player.state = string('jump'))
{
    lower_leg.image_angle = angle_ease(lower_leg.image_angle, lower_angle, 4);
}
//END Jump State

//Land State
if(player.state = string('land'))
{
    lower_leg.image_angle = angle_ease(lower_leg.image_angle, lower_angle, 2);
}
//END Land State

//Normal State 
else if(player.state=string('normal'))
{
    lower_leg.image_angle = image_angle-15*image_xscale;
}
//END Normal State 

//ToNorm State 
else if(player.state=string('tonorm'))
{
    lower_leg.image_angle = angle_ease(lower_leg.image_angle,image_angle-15*image_xscale,4);
}
//END ToNorm State 

//Attack State 
else if(player.state=string('attack'))
{
    lower_leg.image_angle = lower_angle;
}
//END Attack State 

//Shield State

else if(player.state=string('shield') || player.state=string('kneel'))
{
    if(me=1)
    {
        lower_leg.image_angle = angle_ease(lower_leg.image_angle,-80*image_xscale,8);
    }
    else if(me=2)
    {
        lower_leg.image_angle = angle_ease(lower_leg.image_angle,0,8);
    }
    else if(me=3)
    {
        lower_leg.image_angle = angle_ease(lower_leg.image_angle,10*image_xscale,8);
    }
    else
    {
        lower_leg.image_angle = angle_ease(lower_leg.image_angle,-70*image_xscale,8);
    }    
}

//END Shield State
 
/***************************************************
  END Angled States
 ***************************************************/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,0,x,y,image_xscale,image_yscale,image_angle,make_color_hsv(hue_2,sat_2,val_2),image_alpha);
draw_sprite_ext(sprite_index,1,x,y,image_xscale,image_yscale,image_angle,make_color_hsv(hue_prime,sat_prime,val_prime),image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,2</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
