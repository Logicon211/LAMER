<<<<<<< HEAD
<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar numPlayersButtons;
numPlayersButtons = 0;
globalvar selectedPlayersButton;
selectedPlayersButton = 0;

globalvar numCPUsButtons;
numCPUsButtons = 0;
globalvar selectedCPUsButton;
selectedCPUsButton = 0;

globalvar timeButtons;
timeButtons = 0;
globalvar selectedTimeButton;
selectedTimeButton = 0;

globalvar livesButtons;
livesButtons = 0;
globalvar selectedLivesButton;
selectedLivesButton = 0;

globalvar creditLimitButtons;
creditLimitButtons = 0;
globalvar selectedCreditButton;
selectedCreditButton = 0;

globalvar backNextButtons;
backNextButtons = 0;
globalvar selectedBackNextButton;
selectedBackNextButton = -1;

//first time check
firstTimeRun = false;

globalvar selectedSettingsButton;
selectedSettingsButton = 0;

globalvar selectedSettingsRow;
selectedSettingsRow = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!firstTimeRun) 
{
    selectedSettingsButton = numPlayersButtons[selectedPlayersButton];
    selectedSettingsRow = 0;
    firstTimeRun = true;
}

selectedSettingsButton.state = 1;


var difference = numPlayersSetting;
if(selectedCPUsButton &gt;= difference)
{
    selectedCPUsButton = difference-1;
    numCPUsButtons[selectedCPUsButton].state = 2;
}
for(var i = 0; i &lt; array_length_1d(numCPUsButtons); i++)
{
    if(numCPUsButtons[i].state == 3)
    {
        numCPUsButtons[i].state = 0;
    }
}
for(var i = difference; i &lt; array_length_1d(numCPUsButtons); i++)
{
    numCPUsButtons[i].state = 3;
}


if(numPlayersButtons[selectedPlayersButton].state != 1) {
    numPlayersButtons[selectedPlayersButton].state = 2;
}
if(numCPUsButtons[selectedCPUsButton].state != 1) {
    numCPUsButtons[selectedCPUsButton].state = 2;
}
if(timeButtons[selectedTimeButton].state != 1) {
    timeButtons[selectedTimeButton].state = 2;
}
if(livesButtons[selectedLivesButton].state != 1) {
    livesButtons[selectedLivesButton].state = 2;
}
if(creditLimitButtons[selectedCreditButton].state != 1) {
    creditLimitButtons[selectedCreditButton].state = 2;
}

//LEFT CHECK
if(left_check_pressed())
{
    audio_play_sound(MenuNavigationSound,1,false);
    //Num Players Row
    if(selectedSettingsRow == 0)
    {
        selectedSettingsButton.state = 0;
        selectedPlayersButton--;
        if(selectedPlayersButton &lt; 0)
        {
            selectedPlayersButton = array_length_1d(numPlayersButtons) - 1
        }
        numPlayersButtons[selectedPlayersButton].alarm[1] = true;
        selectedSettingsButton = numPlayersButtons[selectedPlayersButton];
    }
    //Num CPUs Row
    else if(selectedSettingsRow == 1)
    {
        selectedSettingsButton.state = 0;
        selectedCPUsButton--;
        if(selectedCPUsButton &lt; 0)
        {
            if(numPlayersSetting == 4)
            {
                selectedCPUsButton = array_length_1d(numCPUsButtons) - 1
            }
            else
            {
                selectedCPUsButton = difference - 1;
            }
        }
        numCPUsButtons[selectedCPUsButton].alarm[1] = true;
        selectedSettingsButton = numCPUsButtons[selectedCPUsButton];
    }
    //Time Limit Row
    else if(selectedSettingsRow == 2)
    {
        selectedSettingsButton.state = 0;
        selectedTimeButton--;
        if(selectedTimeButton &lt; 0)
        {
            selectedTimeButton = array_length_1d(timeButtons) - 1
        }
        timeButtons[selectedTimeButton].alarm[1] = true;
        selectedSettingsButton = timeButtons[selectedTimeButton];
    }
    //Lives Row
    else if(selectedSettingsRow == 3)
    {
        selectedSettingsButton.state = 0;
        selectedLivesButton--;
        if(selectedLivesButton &lt; 0)
        {
            selectedLivesButton = array_length_1d(livesButtons) - 1
        }
        livesButtons[selectedLivesButton].alarm[1] = true;
        selectedSettingsButton = livesButtons[selectedLivesButton];
    }
    //Credit Limit Row
    else if(selectedSettingsRow == 4)
    {
        selectedSettingsButton.state = 0;
        selectedCreditButton--;
        if(selectedCreditButton &lt; 0)
        {
            selectedCreditButton = array_length_1d(creditLimitButtons) - 1
        }
        creditLimitButtons[selectedCreditButton].alarm[1] = true;
        selectedSettingsButton = creditLimitButtons[selectedCreditButton];
    }
    //Back - Next Button Row
    else if(selectedSettingsRow == 5)
    {
        if(selectedBackNextButton == -1)
        {
            selectedBackNextButton = 0;
        }
    
        selectedSettingsButton.state = 0;
        selectedBackNextButton--;
        if(selectedBackNextButton &lt; 0)
        {
            selectedBackNextButton = array_length_1d(backNextButtons) - 1
        }
        selectedSettingsButton = backNextButtons[selectedBackNextButton];
    }
}
//RIGHT CHECK
if(right_check_pressed())
{
    audio_play_sound(MenuNavigationSound,1,false);
    //Num Players Row
    if(selectedSettingsRow == 0)
    {
        selectedSettingsButton.state = 0;
        selectedPlayersButton++;
        if(selectedPlayersButton == array_length_1d(numPlayersButtons))
        {
            selectedPlayersButton = 0
        }
        numPlayersButtons[selectedPlayersButton].alarm[1] = true;
        selectedSettingsButton = numPlayersButtons[selectedPlayersButton];
    }
    //Num CPUs Row
    else if(selectedSettingsRow == 1)
    {
        selectedSettingsButton.state = 0;
        selectedCPUsButton++;
        if(selectedCPUsButton == array_length_1d(numCPUsButtons) or selectedCPUsButton &gt;= difference)
        {
            selectedCPUsButton = 0
        }
        numCPUsButtons[selectedCPUsButton].alarm[1] = true;
        selectedSettingsButton = numCPUsButtons[selectedCPUsButton];
    }
    //Time Limit Row
    else if(selectedSettingsRow == 2)
    {
        selectedSettingsButton.state = 0;
        selectedTimeButton++;
        if(selectedTimeButton == array_length_1d(timeButtons))
        {
            selectedTimeButton = 0
        }
        timeButtons[selectedTimeButton].alarm[1] = true;
        selectedSettingsButton = timeButtons[selectedTimeButton];
    }
    //Lives Row
    else if(selectedSettingsRow == 3)
    {
        selectedSettingsButton.state = 0;
        selectedLivesButton++;
        if(selectedLivesButton == array_length_1d(livesButtons))
        {
            selectedLivesButton = 0
        }
        livesButtons[selectedLivesButton].alarm[1] = true;
        selectedSettingsButton = livesButtons[selectedLivesButton];
    }
    //Credit Limit Row
    else if(selectedSettingsRow == 4)
    {
        selectedSettingsButton.state = 0;
        selectedCreditButton++;
        if(selectedCreditButton == array_length_1d(creditLimitButtons))
        {
            selectedCreditButton = 0
        }
        creditLimitButtons[selectedCreditButton].alarm[1] = true;
        selectedSettingsButton = creditLimitButtons[selectedCreditButton];
    }
    //Back - Next Button Row
    else if(selectedSettingsRow == 5)
    {
        if(selectedBackNextButton == -1)
        {
            selectedBackNextButton = 0;
        }
    
        selectedSettingsButton.state = 0;
        selectedBackNextButton++;
        if(selectedBackNextButton == array_length_1d(backNextButtons))
        {
            selectedBackNextButton = 0
        }
        selectedSettingsButton = backNextButtons[selectedBackNextButton];
    }
}
//UP CHECK
if(up_check_pressed())
{
    audio_play_sound(MenuNavigationSound,1,false);
    //Num Players Row
    if(selectedSettingsRow == 0)
    {
        selectedSettingsRow = 5;
        selectedSettingsButton.state = 3;
        if(selectedBackNextButton == -1)
        {
            selectedBackNextButton = 0;
        }
        selectedSettingsButton = backNextButtons[selectedBackNextButton];
    }
    //Num CPUs Row
    else if(selectedSettingsRow == 1)
    {
        selectedSettingsRow = 0;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = numPlayersButtons[selectedPlayersButton];
    }
    //Time Limit Row
    else if(selectedSettingsRow == 2)
    {
        selectedSettingsRow = 1;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = numCPUsButtons[selectedCPUsButton];
    }
    //Lives Row
    else if(selectedSettingsRow == 3)
    {
        selectedSettingsRow = 2;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = timeButtons[selectedTimeButton];
    }
    //Credit Limit Row
    else if(selectedSettingsRow == 4)
    {
        selectedSettingsRow = 3;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = livesButtons[selectedLivesButton];
    }
    //Back - Next Button Row
    else if(selectedSettingsRow == 5)
    {
        selectedSettingsRow = 4;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = creditLimitButtons[selectedCreditButton];
    }
}
//DOWN CHECK
if(down_check_pressed())
{
    audio_play_sound(MenuNavigationSound,1,false);
    //Num Players Row
    if(selectedSettingsRow == 0)
    {
        selectedSettingsRow = 1;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = numCPUsButtons[selectedCPUsButton];
    }
    //Num CPUs Row
    else if(selectedSettingsRow == 1)
    {
        selectedSettingsRow = 2;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = timeButtons[selectedTimeButton];
    }
    //Time Limit Row
    else if(selectedSettingsRow == 2)
    {
        selectedSettingsRow = 3;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = livesButtons[selectedLivesButton];
    }
    //Lives Row
    else if(selectedSettingsRow == 3)
    {
        selectedSettingsRow = 4;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = creditLimitButtons[selectedCreditButton];
    }
    //Credit Limit Row
    else if(selectedSettingsRow == 4)
    {
        selectedSettingsRow = 5;
        selectedSettingsButton.state = 3;
        if(selectedBackNextButton == -1)
        {
            selectedBackNextButton = 0;
        }
        selectedSettingsButton = backNextButtons[selectedBackNextButton];
    }
    //Back - Next Button Row
    else if(selectedSettingsRow == 5)
    {
        selectedSettingsRow = 0;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = numPlayersButtons[selectedPlayersButton];
    }
}

if(jump_check_pressed())
{
    audio_play_sound(MenuConfirmationSound,1,false);
    selectedSettingsButton.alarm[1] = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selectedSettingsButton.alarm[1] = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
=======
<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar numPlayersButtons;
numPlayersButtons = 0;
globalvar selectedPlayersButton;
selectedPlayersButton = 0;

globalvar numCPUsButtons;
numCPUsButtons = 0;
globalvar selectedCPUsButton;
selectedCPUsButton = 0;

globalvar timeButtons;
timeButtons = 0;
globalvar selectedTimeButton;
selectedTimeButton = 0;

globalvar livesButtons;
livesButtons = 0;
globalvar selectedLivesButton;
selectedLivesButton = 0;

globalvar creditLimitButtons;
creditLimitButtons = 0;
globalvar selectedCreditButton;
selectedCreditButton = 0;

globalvar backNextButtons;
backNextButtons = 0;
globalvar selectedBackNextButton;
selectedBackNextButton = -1;

//first time check
firstTimeRun = false;

globalvar selectedSettingsButton;
selectedSettingsButton = 0;

globalvar selectedSettingsRow;
selectedSettingsRow = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!firstTimeRun) 
{
    selectedSettingsButton = numPlayersButtons[selectedPlayersButton];
    selectedSettingsRow = 0;
    firstTimeRun = true;
}

selectedSettingsButton.state = 1;


var difference = numPlayersSetting;
if(selectedCPUsButton &gt;= difference)
{
    selectedCPUsButton = difference-1;
    numCPUsButtons[selectedCPUsButton].state = 2;
}
for(var i = 0; i &lt; array_length_1d(numCPUsButtons); i++)
{
    if(numCPUsButtons[i].state == 3)
    {
        numCPUsButtons[i].state = 0;
    }
}
for(var i = difference; i &lt; array_length_1d(numCPUsButtons); i++)
{
    numCPUsButtons[i].state = 3;
}


if(numPlayersButtons[selectedPlayersButton].state != 1) {
    numPlayersButtons[selectedPlayersButton].state = 2;
}
if(numCPUsButtons[selectedCPUsButton].state != 1) {
    numCPUsButtons[selectedCPUsButton].state = 2;
}
if(timeButtons[selectedTimeButton].state != 1) {
    timeButtons[selectedTimeButton].state = 2;
}
if(livesButtons[selectedLivesButton].state != 1) {
    livesButtons[selectedLivesButton].state = 2;
}
if(creditLimitButtons[selectedCreditButton].state != 1) {
    creditLimitButtons[selectedCreditButton].state = 2;
}

//LEFT CHECK
if(left_check_pressed())
{
    audio_play_sound(MenuNavigationSound,1,false);
    //Num Players Row
    if(selectedSettingsRow == 0)
    {
        selectedSettingsButton.state = 0;
        selectedPlayersButton--;
        if(selectedPlayersButton &lt; 0)
        {
            selectedPlayersButton = array_length_1d(numPlayersButtons) - 1
        }
        numPlayersButtons[selectedPlayersButton].alarm[1] = true;
        selectedSettingsButton = numPlayersButtons[selectedPlayersButton];
    }
    //Num CPUs Row
    else if(selectedSettingsRow == 1)
    {
        selectedSettingsButton.state = 0;
        selectedCPUsButton--;
        if(selectedCPUsButton &lt; 0)
        {
            if(numPlayersSetting == 4)
            {
                selectedCPUsButton = array_length_1d(numCPUsButtons) - 1
            }
            else
            {
                selectedCPUsButton = difference - 1;
            }
        }
        numCPUsButtons[selectedCPUsButton].alarm[1] = true;
        selectedSettingsButton = numCPUsButtons[selectedCPUsButton];
    }
    //Time Limit Row
    else if(selectedSettingsRow == 2)
    {
        selectedSettingsButton.state = 0;
        selectedTimeButton--;
        if(selectedTimeButton &lt; 0)
        {
            selectedTimeButton = array_length_1d(timeButtons) - 1
        }
        timeButtons[selectedTimeButton].alarm[1] = true;
        selectedSettingsButton = timeButtons[selectedTimeButton];
    }
    //Lives Row
    else if(selectedSettingsRow == 3)
    {
        selectedSettingsButton.state = 0;
        selectedLivesButton--;
        if(selectedLivesButton &lt; 0)
        {
            selectedLivesButton = array_length_1d(livesButtons) - 1
        }
        livesButtons[selectedLivesButton].alarm[1] = true;
        selectedSettingsButton = livesButtons[selectedLivesButton];
    }
    //Credit Limit Row
    else if(selectedSettingsRow == 4)
    {
        selectedSettingsButton.state = 0;
        selectedCreditButton--;
        if(selectedCreditButton &lt; 0)
        {
            selectedCreditButton = array_length_1d(creditLimitButtons) - 1
        }
        creditLimitButtons[selectedCreditButton].alarm[1] = true;
        selectedSettingsButton = creditLimitButtons[selectedCreditButton];
    }
    //Back - Next Button Row
    else if(selectedSettingsRow == 5)
    {
        if(selectedBackNextButton == -1)
        {
            selectedBackNextButton = 0;
        }
    
        selectedSettingsButton.state = 0;
        selectedBackNextButton--;
        if(selectedBackNextButton &lt; 0)
        {
            selectedBackNextButton = array_length_1d(backNextButtons) - 1
        }
        selectedSettingsButton = backNextButtons[selectedBackNextButton];
    }
}
//RIGHT CHECK
if(right_check_pressed())
{
    audio_play_sound(MenuNavigationSound,1,false);
    //Num Players Row
    if(selectedSettingsRow == 0)
    {
        selectedSettingsButton.state = 0;
        selectedPlayersButton++;
        if(selectedPlayersButton == array_length_1d(numPlayersButtons))
        {
            selectedPlayersButton = 0
        }
        numPlayersButtons[selectedPlayersButton].alarm[1] = true;
        selectedSettingsButton = numPlayersButtons[selectedPlayersButton];
    }
    //Num CPUs Row
    else if(selectedSettingsRow == 1)
    {
        selectedSettingsButton.state = 0;
        selectedCPUsButton++;
        if(selectedCPUsButton == array_length_1d(numCPUsButtons) or selectedCPUsButton &gt;= difference)
        {
            selectedCPUsButton = 0
        }
        numCPUsButtons[selectedCPUsButton].alarm[1] = true;
        selectedSettingsButton = numCPUsButtons[selectedCPUsButton];
    }
    //Time Limit Row
    else if(selectedSettingsRow == 2)
    {
        selectedSettingsButton.state = 0;
        selectedTimeButton++;
        if(selectedTimeButton == array_length_1d(timeButtons))
        {
            selectedTimeButton = 0
        }
        timeButtons[selectedTimeButton].alarm[1] = true;
        selectedSettingsButton = timeButtons[selectedTimeButton];
    }
    //Lives Row
    else if(selectedSettingsRow == 3)
    {
        selectedSettingsButton.state = 0;
        selectedLivesButton++;
        if(selectedLivesButton == array_length_1d(livesButtons))
        {
            selectedLivesButton = 0
        }
        livesButtons[selectedLivesButton].alarm[1] = true;
        selectedSettingsButton = livesButtons[selectedLivesButton];
    }
    //Credit Limit Row
    else if(selectedSettingsRow == 4)
    {
        selectedSettingsButton.state = 0;
        selectedCreditButton++;
        if(selectedCreditButton == array_length_1d(creditLimitButtons))
        {
            selectedCreditButton = 0
        }
        creditLimitButtons[selectedCreditButton].alarm[1] = true;
        selectedSettingsButton = creditLimitButtons[selectedCreditButton];
    }
    //Back - Next Button Row
    else if(selectedSettingsRow == 5)
    {
        if(selectedBackNextButton == -1)
        {
            selectedBackNextButton = 0;
        }
    
        selectedSettingsButton.state = 0;
        selectedBackNextButton++;
        if(selectedBackNextButton == array_length_1d(backNextButtons))
        {
            selectedBackNextButton = 0
        }
        selectedSettingsButton = backNextButtons[selectedBackNextButton];
    }
}
//UP CHECK
if(up_check_pressed())
{
    audio_play_sound(MenuNavigationSound,1,false);
    //Num Players Row
    if(selectedSettingsRow == 0)
    {
        selectedSettingsRow = 5;
        selectedSettingsButton.state = 3;
        if(selectedBackNextButton == -1)
        {
            selectedBackNextButton = 0;
        }
        selectedSettingsButton = backNextButtons[selectedBackNextButton];
    }
    //Num CPUs Row
    else if(selectedSettingsRow == 1)
    {
        selectedSettingsRow = 0;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = numPlayersButtons[selectedPlayersButton];
    }
    //Time Limit Row
    else if(selectedSettingsRow == 2)
    {
        selectedSettingsRow = 1;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = numCPUsButtons[selectedCPUsButton];
    }
    //Lives Row
    else if(selectedSettingsRow == 3)
    {
        selectedSettingsRow = 2;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = timeButtons[selectedTimeButton];
    }
    //Credit Limit Row
    else if(selectedSettingsRow == 4)
    {
        selectedSettingsRow = 3;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = livesButtons[selectedLivesButton];
    }
    //Back - Next Button Row
    else if(selectedSettingsRow == 5)
    {
        selectedSettingsRow = 4;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = creditLimitButtons[selectedCreditButton];
    }
}
//DOWN CHECK
if(down_check_pressed())
{
    audio_play_sound(MenuNavigationSound,1,false);
    //Num Players Row
    if(selectedSettingsRow == 0)
    {
        selectedSettingsRow = 1;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = numCPUsButtons[selectedCPUsButton];
    }
    //Num CPUs Row
    else if(selectedSettingsRow == 1)
    {
        selectedSettingsRow = 2;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = timeButtons[selectedTimeButton];
    }
    //Time Limit Row
    else if(selectedSettingsRow == 2)
    {
        selectedSettingsRow = 3;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = livesButtons[selectedLivesButton];
    }
    //Lives Row
    else if(selectedSettingsRow == 3)
    {
        selectedSettingsRow = 4;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = creditLimitButtons[selectedCreditButton];
    }
    //Credit Limit Row
    else if(selectedSettingsRow == 4)
    {
        selectedSettingsRow = 5;
        selectedSettingsButton.state = 3;
        if(selectedBackNextButton == -1)
        {
            selectedBackNextButton = 0;
        }
        selectedSettingsButton = backNextButtons[selectedBackNextButton];
    }
    //Back - Next Button Row
    else if(selectedSettingsRow == 5)
    {
        selectedSettingsRow = 0;
        selectedSettingsButton.state = 3;
        selectedSettingsButton = numPlayersButtons[selectedPlayersButton];
    }
}

if(attack1_check_pressed())
{
    audio_play_sound(MenuConfirmationSound,1,false);
    selectedSettingsButton.alarm[1] = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selectedSettingsButton.alarm[1] = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
>>>>>>> 5c5ced27cb45a1854264320aff2e7fcb49ed77f9
