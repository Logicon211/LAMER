<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>heavycore3</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dead = false;
player = instance_nearest(x,y,player_o);
lefthalf = 62;
righthalf = 66;

//create boosters
booster[1] = instance_create(x,y,booster_o);
booster[2] = instance_create(x,y,booster_o);
booster[3] = instance_create(x,y,booster_o);

boostNums = 3;

/***************************************************
  Create Legs
 ***************************************************/
leg1 = createPart(player.playerNum,4);
leg1.depth = depth+2
leg1.me = 1;
lleg1 = leg1.lower_leg;
if(leg1.legnums=2)
{
    leg2 = createPart(player.playerNum,4);
    leg2.depth = depth-1;
    leg2.me = 2;
    legnums = 2;
    lleg2 = leg2.lower_leg;
}
else if(leg1.legnums=4)
{
    leg2 = createPart(player.playerNum,4);
    leg2.depth = depth-1;
    leg2.me = 2;
    leg3 = createPart(player.playerNum,4);
    leg3.depth = depth-2;
    leg3.me = 3;
    leg4 = createPart(player.playerNum,4);
    leg4.depth = depth+3;
    leg4.me = 4;
    legnums = 4;
}

/***************************************************
  END Create Legs
 ***************************************************/

//Create Head
head = createPart(player.playerNum,0);
//END Create Head

//Create Arm1
arm[1] = createPart(player.playerNum,2);
arm[1].depth = depth-2;
//END Create Arm1

//Create Arm2
arm[2] = createPart(player.playerNum,3);
arm[2].depth = depth+4;
//END Create Arm2

attack[1] = false;
attack[2] = false;
attackType[1] = arm[1].attack_type;
attackType[2] = arm[2].attack_type;

globalvar gunCount;
gunCount = 0;

canSetAttack = true;
attackVar = 0;

delete = false;

/***************************************************
  Set Height
  
  Revised: Height needed new code. It must not look
            at the height of the sprite but at the
            distance between the origin and one of
            the verticle anchor points. The anchor
            for legs for example, is at y+35, so a
            section of the total height is defined
            within this core object as y+35-y = 35
            
            This must be done for all limbs with a
            connection and joint to the core, save
            for arms which will not effect hegiht.
            
            The head anchor is above the origin of
            the core, so we must take the absolute
            value of any given height attribute.
 ***************************************************/

//Initialize
height = 0;
//Origin to legs = 35
height += 35;
//Origin to head = -15
height += 15;

//head origin to top of sprite
height += head.height;
//legs height
height += leg1.height;

heightAdjust = height/2-head.height-15;

/***************************************************
  END Set Height
 ***************************************************/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>dead</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(player))
{
    with(head){instance_destroy();}
    instance_destroy();
}

/***************************************************
  Anchor Limbs
    This code locks the different parts into place
    on the torso.
 ***************************************************/

//Torso
vspeed = player.vspeed;
hspeed = player.hspeed;
//END Torso

//legs
joint = rotation_tracker(x,y,image_angle,x-1,y+35);
limb_anchor(leg1,joint[0],joint[1],hspeed,vspeed,image_xscale);
limb_anchor(leg2,joint[0],joint[1],hspeed,vspeed,image_xscale);
if(legnums = 4)
{
    limb_anchor(leg3,joint[0],joint[1],hspeed,vspeed,-image_xscale);
    limb_anchor(leg4,joint[0],joint[1],hspeed,vspeed,-image_xscale);
}
//END legs

//arms
joint = rotation_tracker(x,y,image_angle,x-9,y+4);
limb_anchor(arm[1],joint[0],joint[1],hspeed,vspeed,image_xscale);
limb_anchor(arm[2],joint[0],joint[1],hspeed,vspeed,image_xscale);
arm[1].depth = depth+10*image_xscale;
arm[2].depth = depth+10*-image_xscale;
//END arms

//head
joint = rotation_tracker(x,y,image_angle,x-5,y-20);
limb_anchor(head,joint[0],joint[1],hspeed,vspeed,image_xscale);
//END head

//boosters
joint = rotation_tracker(x,y,image_angle,x-70,y-47);
limb_anchor(booster[1],joint[0],joint[1],hspeed,vspeed,image_xscale);
joint = rotation_tracker(x,y,image_angle,x-73,y-16);
limb_anchor(booster[2],joint[0],joint[1],hspeed,vspeed,image_xscale);
joint = rotation_tracker(x,y,image_angle,x-70,y+27);
limb_anchor(booster[3],joint[0],joint[1],hspeed,vspeed,image_xscale);
//END boosters

/***************************************************
  END Anchor Limbs
 ***************************************************/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/***************************************************
  This script contains positioning code for
  Titans. It is to be run by the torso object.
  
  --------------------------------------
  !!TORSO POSITIONING MUST BE DICTATED!!
  ------!!BY THE PLAYER OBJECT!!-------
  --------------------------------------
  
  By handling the positioning code for the torso
  AND ligaments within this script will cause the
  torso to remain one frame ahead due to GameMaker
  Studio's draw method order.
      
 ***************************************************/ 
  
/***************************************************
  Jump State
 ***************************************************/

if(player.state = string('jump'))
{
    head.image_angle = angle_ease(head.image_angle, image_angle*1.2, 4);
    arm[1].image_angle = angle_ease(arm[1].image_angle, -70*image_xscale, 4);
    arm[2].image_angle = angle_ease(arm[2].image_angle, -20*image_xscale, 4);
    leg1.image_angle = angle_ease(leg1.image_angle, 0*image_xscale, 4);
    leg2.image_angle = angle_ease(leg2.image_angle, 60*image_xscale, 4);
    leg1.lower_angle = -80*image_xscale;
    leg2.lower_angle = 10*image_xscale;
}

/***************************************************
  END Jump State
 ***************************************************/

/***************************************************
  Normal State
 ***************************************************/

if(player.state = string('normal'))
{
    arm[1].image_angle = image_angle*2.2;
    arm[2].image_angle = abs(image_angle*1.8)*image_xscale;
    if(hspeed=0)
    {
        leg1.image_angle = angle_ease(leg1.image_angle, -5*image_xscale+image_angle/2, 8);
        leg2.image_angle = angle_ease(leg2.image_angle, 20*image_xscale+image_angle/2, 8);
        head.image_angle = angle_ease(head.image_angle, image_angle*1.2, 8);
    }
    else if(player.airborne || player.boosting)
    {
        leg1.image_angle = angle_ease(leg1.image_angle, -10+image_angle, 12);
        leg2.image_angle = angle_ease(leg2.image_angle, 5+image_angle, 12);
        head.image_angle = angle_ease(head.image_angle, image_angle/2, 8);
    }
    else
    {
        leg_var = 60*sin(degtorad(1.5*x));
        leg1.image_angle = angle_ease(leg1.image_angle, leg_var+image_angle/2, 4);
        leg2.image_angle = angle_ease(leg2.image_angle, -leg_var+image_angle/2, 4);
        head.image_angle = angle_ease(head.image_angle, image_angle*1.2, 8);
    }
}

/***************************************************
  END Normal State
 ***************************************************/

/***************************************************
  toNormal State
 ***************************************************/

if(player.state = string('tonorm'))
{
    leg_var = 25*sin(degtorad(1.5*x));
    arm[1].image_angle = angle_ease(arm[1].image_angle, image_angle*2.2, 2);
    arm[2].image_angle = angle_ease(arm[2].image_angle, abs(image_angle*1.8)*image_xscale, 4);
    head.image_angle = angle_ease(head.image_angle, image_angle*1.2, 2);
    if(hspeed=0)
    {
        leg1.image_angle = angle_ease(leg1.image_angle, -5*image_xscale+image_angle/2, 8);
        leg2.image_angle = angle_ease(leg2.image_angle, 20*image_xscale+image_angle/2, 8);
        head.image_angle = angle_ease(head.image_angle, image_angle*1.2, 8);
    }
    else if(player.airborne || player.boosting)
    {
        leg1.image_angle = angle_ease(leg1.image_angle, -10+image_angle, 12);
        leg2.image_angle = angle_ease(leg2.image_angle, 5+image_angle, 12);
        head.image_angle = angle_ease(head.image_angle, image_angle/2, 8);
    }
    else
    {
        leg_var = 60*sin(degtorad(1.5*x));
        leg1.image_angle = angle_ease(leg1.image_angle, leg_var+image_angle/2, 4);
        leg2.image_angle = angle_ease(leg2.image_angle, -leg_var+image_angle/2, 4);
        head.image_angle = angle_ease(head.image_angle, image_angle*1.2, 8);
    }
}

/***************************************************
  END toNormal State
 ***************************************************/

/***************************************************
  Shield State
 ***************************************************/

if(player.state = string('shield'))
{
    arm[1].image_angle = angle_ease(arm[1].image_angle, -80*image_xscale, 4);
    arm[2].image_angle = angle_ease(arm[2].image_angle, 70*image_xscale, 4);
    head.image_angle = angle_ease(head.image_angle, -20*image_xscale, 4);
    leg1.image_angle = angle_ease(leg1.image_angle, -20*image_xscale, 4);
    leg2.image_angle = angle_ease(leg2.image_angle, 80*image_xscale, 4);
    //leg1.lower_angle = -90*image_xscale;
    //leg2.lower_angle = -30*image_xscale;
    if(!audio_is_playing(ShieldLoop)){
    audio_play_sound(ShieldLoop,1,false);
    }
}

/***************************************************
  END Shield State
 ***************************************************/

/***************************************************
  Kneel State
 ***************************************************/

if(player.state = string('kneel'))
{
    arm[1].image_angle = angle_ease(arm[1].image_angle, -80*image_xscale, 4);
    arm[2].image_angle = angle_ease(arm[2].image_angle, 70*image_xscale, 4);
    head.image_angle = angle_ease(head.image_angle, -20*image_xscale, 4);
    leg1.image_angle = angle_ease(leg1.image_angle, -20*image_xscale, 4);
    leg2.image_angle = angle_ease(leg2.image_angle, 80*image_xscale, 4);
    //leg1.lower_angle = -90*image_xscale;
    //leg2.lower_angle = -30*image_xscale;
}

/***************************************************
  END Kneel State
 ***************************************************/

/***************************************************
  Land State
 ***************************************************/

if(player.state = string('land'))
{
    arm[1].image_angle = angle_ease(arm[1].image_angle, player.landCounter*image_xscale*-8, 4);
    arm[2].image_angle = angle_ease(arm[2].image_angle, player.landCounter*image_xscale*-8, 4);
    head.image_angle = angle_ease(head.image_angle, player.landCounter*image_xscale*-8, 4);
    leg1.image_angle = angle_ease(leg1.image_angle, player.landCounter*image_xscale*4, 2);
    leg2.image_angle = angle_ease(leg2.image_angle, player.landCounter*image_xscale*14, 2);
    leg1.lower_angle = player.landCounter*image_xscale*-14;
    leg2.lower_angle = player.landCounter*image_xscale*4;
}

/***************************************************
  END Land State
 ***************************************************/
 
/***************************************************
  Attack 1 State
 ***************************************************/

if(player.state = string('attack'))
{
    if(attack1)
    {
        swordAnimation1();
    }
    else if(attack2)
    {
        gunAnimation1();
    }
    else
    {
        player.state = string("toNorm");
    }
    
    /***************************************************
    image_angle = angle_ease(image_angle, -20*image_xscale, 4);
    arm[1].image_angle = angle_ease(arm[1].image_angle, player.landCounter*image_xscale*-8, 4);
    arm[2].image_angle = angle_ease(arm[2].image_angle, player.landCounter*image_xscale*-8, 4);
    head.image_angle = angle_ease(head.image_angle, player.landCounter*image_xscale*-8, 4);
    leg1.image_angle = angle_ease(leg1.image_angle, player.landCounter*image_xscale*4, 2);
    leg2.image_angle = angle_ease(leg2.image_angle, player.landCounter*image_xscale*10, 2);
    leg1.lower_angle = player.landCounter*image_xscale*-14;
    leg2.lower_angle = player.landCounter*image_xscale*4;
     ***************************************************/
}

/***************************************************
  END Attack 1 State
 ***************************************************/

/***************************************************
  Slide Left State
 ***************************************************/

if(player.state = string('slideL'))
{
    arm[1].image_angle = angle_ease(arm[1].image_angle, -80*image_xscale, 4);
    arm[2].image_angle = angle_ease(arm[2].image_angle, 70*image_xscale, 4);
    head.image_angle = angle_ease(head.image_angle, -20*image_xscale, 4);
    leg1.image_angle = angle_ease(leg1.image_angle, -20*image_xscale, 4);
    leg2.image_angle = angle_ease(leg2.image_angle, 80*image_xscale, 4);
}

/***************************************************
  END Slide Left State
 ***************************************************/

/***************************************************
  Slide Right State
 ***************************************************/

if(player.state = string('slideR'))
{
    arm[1].image_angle = angle_ease(arm[1].image_angle, -80*image_xscale, 4);
    arm[2].image_angle = angle_ease(arm[2].image_angle, 70*image_xscale, 4);
    head.image_angle = angle_ease(head.image_angle, -20*image_xscale, 4);
    leg1.image_angle = angle_ease(leg1.image_angle, -20*image_xscale, 4);
    leg2.image_angle = angle_ease(leg2.image_angle, 80*image_xscale, 4);
}

/***************************************************
  END Slide Right State
 ***************************************************/
 
/***************************************************
  Attack State
 **************************************************/

if(player.state = string('Attack'))
{
    attackControl2(arm[1],1,arm[2],2,arm[1].swingSpeed);
    if(player.airborne)
    {   vspeed -= 2;
    }
}

/***************************************************
  END Attack State
 ***************************************************/
/***************************************************
  mobileAttack State
 **************************************************/

if(player.state = string('mobileAttack'))
{
    if(player.attack1)
    {   attackControl2(arm[1],1,arm[2],2,arm[1].swingSpeed);
    }
    else 
    {   arm[1].image_angle = image_angle*2.2;
    }
    if(player.attack2)
    {   attackControl2(arm[2],2,arm[1],1,arm[1].swingSpeed);
    }
    else
    {   arm[2].image_angle = abs(image_angle*1.8)*image_xscale;
    }
    if(hspeed=0)
    {
        leg1.image_angle = angle_ease(leg1.image_angle, -5*image_xscale+image_angle/2, 8);
        leg2.image_angle = angle_ease(leg2.image_angle, 20*image_xscale+image_angle/2, 8);
        head.image_angle = angle_ease(head.image_angle, image_angle*1.2, 8);
    }
    else if(player.airborne || player.boosting)
    {
        leg1.image_angle = angle_ease(leg1.image_angle, -10+image_angle, 12);
        leg2.image_angle = angle_ease(leg2.image_angle, 5+image_angle, 12);
        head.image_angle = angle_ease(head.image_angle, image_angle/2, 8);
    }
    else
    {
        leg_var = 60*sin(degtorad(1.5*x));
        leg1.image_angle = angle_ease(leg1.image_angle, leg_var+image_angle/2, 4);
        leg2.image_angle = angle_ease(leg2.image_angle, -leg_var+image_angle/2, 4);
        head.image_angle = angle_ease(head.image_angle, image_angle*1.2, 8);
    }
}

/***************************************************
  END mobileAttack State
 ***************************************************/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>dead</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vspeed+=1;
playerCollision();
image_angle+=random_range(1,10);
effect_create_below(ef_smoke,x,y,1,c_white);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,0,x,y,image_xscale,image_yscale,image_angle,getPlayerColor(playerNum,1),image_alpha);
draw_sprite_ext(sprite_index,1,x,y,image_xscale,image_yscale,image_angle,getPlayerColor(playerNum,1),image_alpha);
draw_sprite_ext(sprite_index,2,x,y,image_xscale,image_yscale,image_angle,getPlayerColor(playerNum,1),image_alpha);
draw_sprite_ext(sprite_index,3,x,y,image_xscale,image_yscale,image_angle,getPlayerColor(playerNum,0),image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>126,135</point>
    <point>128,128</point>
  </PhysicsShapePoints>
</object>
