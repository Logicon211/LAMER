<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Used to display category name when player looks through a selection of items
globalvar categoryName;
categoryName = "";

//Category number selected so we know what the selected part goes to (Head, LArm, RArm, etc)
globalvar categoryNumber;
categoryNumber = 0;

//Will be used to temporarily store inventory items as Inventory UI items (So we can manipulate them all at the same time)
globalvar inventoryArray;
inventoryArray = 0;

//Array to store the buttons on screen, so we can manipulate them via keyboard
globalvar buttonArray;
buttonArray[0] = 0;
buttonArray[1] = 0;
buttonArray[2] = 0;
buttonArray[3] = 0;
buttonArray[4] = 0;
buttonArray[5] = 0;
buttonArray[6] = 0;
buttonArray[7] = 0;
buttonArray[8] = 0;

globalvar selectedButton;
selectedButton = 0;

globalvar selectedColorButton;
selectedColorButton = 0;

globalvar selectedInventory;
selectedInventory = -1;

globalvar hueBar;
hueBar = 0;
globalvar valBar;
valBar = 0;
globalvar satBar;
satBar = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(buttonArray[selectedButton].state != 2)
{
    buttonArray[selectedButton].state = 1;
}
/*if(colorButtonArray[selectedColorButton].state != 2)
{
    colorButtonArray[selectedColorButton].state = 1;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Print current loadout stats on screen (Still need to add stat comparisons)
//Need to figure out multiple players inventory screens
draw_set_font(InventoryHeader);
draw_text(965, 600, "Money:");
draw_set_font(InventoryContent);
draw_text(965, 625, string(player1Money));

draw_set_font(InventoryHeader);
draw_text(965, 380, "Current Stats:")
draw_set_font(InventoryContent);

var totalCost = 0;
var totalArmor = 0;
var totalWeight = 0;
var totalCooling = 0;
var totalBonuses = "";

if(playerLoadOut1[0] != 0)
{
    totalCost += playerLoadOut1[0].cost
    totalArmor += playerLoadOut1[0].armor
    totalWeight += playerLoadOut1[0].weight
    totalCooling += playerLoadOut1[0].cooling
    if(playerLoadOut1[0].bonuses != "")
    {
        totalBonuses += playerLoadOut1[0].bonuses + "#"
    }
}
if(playerLoadOut1[1] != 0)
{
    totalCost += playerLoadOut1[1].cost
    totalArmor += playerLoadOut1[1].armor
    totalWeight += playerLoadOut1[1].weight
    totalCooling += playerLoadOut1[1].cooling
    if(playerLoadOut1[1].bonuses != "")
    {
        totalBonuses += playerLoadOut1[1].bonuses + "#"
    }
}
if(playerLoadOut1[2] != 0)
{
    totalCost += playerLoadOut1[2].cost
    totalArmor += playerLoadOut1[2].armor
    totalWeight += playerLoadOut1[2].weight
    totalCooling += playerLoadOut1[2].cooling
    if(playerLoadOut1[2].bonuses != "")
    {
        totalBonuses += playerLoadOut1[2].bonuses + "#"
    }
}
if(playerLoadOut1[3] != 0)
{
    totalCost += playerLoadOut1[3].cost
    totalArmor += playerLoadOut1[3].armor
    totalWeight += playerLoadOut1[3].weight
    totalCooling += playerLoadOut1[3].cooling
    if(playerLoadOut1[3].bonuses != "")
    {
        totalBonuses += playerLoadOut1[3].bonuses + "#"
    }
}
if(playerLoadOut1[4] != 0)
{
    totalCost += playerLoadOut1[4].cost
    totalArmor += playerLoadOut1[4].armor
    totalWeight += playerLoadOut1[4].weight
    totalCooling += playerLoadOut1[4].cooling
    if(playerLoadOut1[4].bonuses != "")
    {
        totalBonuses += playerLoadOut1[4].bonuses + "#"
    }
}
if(playerLoadOut1[5] != 0)
{   
    totalCost += playerLoadOut1[5].cost
    totalArmor += playerLoadOut1[5].armor
    totalWeight += playerLoadOut1[5].weight
    totalCooling += playerLoadOut1[5].cooling
    if(playerLoadOut1[5].bonuses != "")
    {
        totalBonuses += playerLoadOut1[5].bonuses + "#"
    }
}

//Cost
draw_text(965, 420, "Total Cost:")
draw_text(1120, 420, string(totalCost))
//Armor
draw_text(965, 450, "Armor:")
draw_text(1120, 450, string(totalArmor))
//Weight
draw_text(965, 480, "Weight:")
draw_text(1120, 480, string(totalWeight))
//Weight
draw_text(965, 510, "Cooling:")
draw_text(1120, 510, string(totalCooling))
//Bonuses
draw_text(965, 540, totalBonuses)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!view_visible[1])
{
    buttonArray[selectedButton].state = 0;
    
    if(selectedButton &gt;= 8)
    {
        selectedButton = 0;
    }
    else 
    {
        selectedButton++;
    }
}
else // This is when you're picking an inventory item
{
    unselectAllItems(inventoryArray);
    if(selectedInventory == -1)
    {
        selectedInventory = 0;
    }
    else if(selectedInventory == array_length_1d(inventoryArray) - 1)
    {
        selectedInventory = 0;
    }
    else
    {
        selectedInventory++;
    }
    inventoryArray[selectedInventory].state = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!view_visible[1])
{
    buttonArray[selectedButton].state = 0;
    
    if(selectedButton == 0)
    {
        selectedButton = 8;
    }
    else 
    {
        selectedButton--;
    }
}
else  // This is when you're picking an inventory item
{
    unselectAllItems(inventoryArray);
    if(selectedInventory == -1)
    {
        selectedInventory = 0;
    }
    else if(selectedInventory == 0)
    {
        selectedInventory = array_length_1d(inventoryArray) - 1;
    }
    else
    {
        selectedInventory--;
    }
    inventoryArray[selectedInventory].state = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!view_visible[1])
{
    buttonArray[selectedButton].state = 0;
    
    buttonArray[selectedButton].alarm[1] = true;
}
else
{
    if(selectedInventory != -1)
    {
        //do code to confirm selection
        playerLoadOut[categoryNumber] = inventoryArray[selectedInventory].inventoryItem;
        if(view_visible[1])
        {
            view_visible[1] = false;
            selectedInventory = -1;
            inventoryArray = destroyArray(inventoryArray);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
