<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Legs_up001</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dead = false;
legnums=2;
me=0;
player=instance_nearest(x,y,player_o);
setdepth=false;
lower_leg = instance_create(x,y,aura_lowerleg);
lower_leg.depth = depth-1;
vspeedvar = 0;
hspeedvar = 0;
lower_angle = 1000;//used during attack animations to set lower leg position
delete = false;

//origin to knee joint
height = 56;
//lowerleg height
height += lower_leg.height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(dead)
{
    vspeed+=1;
    playerCollision();
    image_angle+=random_range(1,10);
    effect_create_above(ef_smoke,x,y,1,c_white);
}
else
{
    if(!instance_exists(player))
    {
        with(lower_leg){instance_destroy();}
        instance_destroy();
    }
    
    joint = rotation_tracker(x,y,image_angle,x-1,y+56)
    limb_anchor(lower_leg,joint[0],joint[1],hspeed,vspeed,image_xscale)
    
    /***************************************************
      Angled States
     ***************************************************/
    
    //Jump State
    if(player.state = string('jump'))
    {
        lower_leg.image_angle = angle_ease(lower_leg.image_angle, lower_angle, 4);
    }
    //END Jump State
    
    //Land State
    if(player.state = string('land'))
    {
        lower_leg.image_angle = angle_ease(lower_leg.image_angle, lower_angle, 2);
    }
    //END Land State
    
    //Normal State 
    else if(player.state=string('normal') or player.state = string('mobileAttack'))
    {
        if(image_angle*image_xscale&gt;0)
        {
            lower_leg.image_angle = image_angle-image_angle*0.25;
        }
        else
        {
            angleVarL = image_angle*3;
            if(angleVarL*image_xscale&gt;135){angleVarL = 135*image_xscale}
            lower_leg.image_angle = image_angle*3;
        }
    }
    //END Normal State 
    
    //ToNorm State 
    else if(player.state=string('tonorm'))
    {
        lower_leg.image_angle = angle_ease(lower_leg.image_angle,image_angle-15*image_xscale,4);
    }
    //END ToNorm State 
    
    //Attack State 
    else if(player.state=string('attack'))
    {
        lower_leg.image_angle = lower_angle;
    }
    //END Attack State 
    
    //Shield State
    
    else if(player.state=string('shield') || player.state=string('kneel'))
    {
        if(me=1)
        {
            lower_leg.image_angle = angle_ease(lower_leg.image_angle,-80*image_xscale,8);
        }
        else if(me=2)
        {
            lower_leg.image_angle = angle_ease(lower_leg.image_angle,0,8);
        }
        else if(me=3)
        {
            lower_leg.image_angle = angle_ease(lower_leg.image_angle,10*image_xscale,8);
        }
        else
        {
            lower_leg.image_angle = angle_ease(lower_leg.image_angle,-70*image_xscale,8);
        }    
    }
    
    //END Shield State
     
    /***************************************************
      END Angled States
     ***************************************************/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,1,x,y,image_xscale,image_yscale,image_angle,getPlayerColor(player.playerNum,0),image_alpha);
draw_sprite_ext(sprite_index,0,x,y,image_xscale,image_yscale,image_angle,getPlayerColor(player.playerNum,1),image_alpha);
draw_sprite_ext(sprite_index,2,x,y,image_xscale,image_yscale,image_angle,getPlayerColor(player.playerNum,1),image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,2</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
