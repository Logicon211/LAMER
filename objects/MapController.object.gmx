<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar mapController;
mapController = id;

globalvar MapNodeList;

globalvar playerMarker;

globalvar moveToNode; //globalvar of node we're moving to

globalvar nodePlayerIsAt; //Node player is on when he starts a battle and/or radio. This is persistent

globalvar radText;
radText = "";
globalvar radFace;
radFace = 0;

//Players' Money
//Will need to load this from save file at some point
globalvar player1Money;
player1Money = 1000;
globalvar player2Money;
player2Money = 0;
globalvar player3Money;
player3Money = 0;
globalvar player4Money;
player4Money = 0;


//Player's current loadout
//player1
globalvar playerLoadOut1;
playerLoadOut1[0] = 0; //Head
playerLoadOut1[1] = 0; //Torso
playerLoadOut1[2] = 0; //Left Arm
playerLoadOut1[3] = 0; //Right Arm
playerLoadOut1[4] = 0; //Legs
playerLoadOut1[5] = 0; //BackPack

//player2
globalvar playerLoadOut2;
playerLoadOut2[0] = 0; //Head
playerLoadOut2[1] = 0; //Torso
playerLoadOut2[2] = 0; //Left Arm
playerLoadOut2[3] = 0; //Right Arm
playerLoadOut2[4] = 0; //Legs
playerLoadOut2[5] = 0; //BackPack

//player1
globalvar playerLoadOut3;
playerLoadOut3[0] = 0; //Head
playerLoadOut3[1] = 0; //Torso
playerLoadOut3[2] = 0; //Left Arm
playerLoadOut3[3] = 0; //Right Arm
playerLoadOut3[4] = 0; //Legs
playerLoadOut3[5] = 0; //BackPack

//player1
globalvar playerLoadOut4;
playerLoadOut4[0] = 0; //Head
playerLoadOut4[1] = 0; //Torso
playerLoadOut4[2] = 0; //Left Arm
playerLoadOut4[3] = 0; //Right Arm
playerLoadOut4[4] = 0; //Legs
playerLoadOut4[5] = 0; //BackPack

//Colors
globalvar player1Colors;
player1Colors[0] = 0; //hue Prime
player1Colors[1] = 0; //sat Prime
player1Colors[2] = 0; //val Prime
player1Colors[3] = 0; //hue Secondary
player1Colors[4] = 0; //sat Secondary
player1Colors[5] = 0; //val Secondary
player1Colors[6] = 0; //hue Energy
player1Colors[7] = 0; //sat Energy
player1Colors[8] = 0; //val Energy

globalvar player2Colors;
player2Colors[0] = 0; //hue Prime
player2Colors[1] = 0; //sat Prime
player2Colors[2] = 0; //val Prime
player2Colors[3] = 0; //hue Secondary
player2Colors[4] = 0; //sat Secondary
player2Colors[5] = 0; //val Secondary
player2Colors[6] = 0; //hue Energy
player2Colors[7] = 0; //sat Energy
player2Colors[8] = 0; //val Energy

globalvar player3Colors;
player3Colors[0] = 0; //hue Prime
player3Colors[1] = 0; //sat Prime
player3Colors[2] = 0; //val Prime
player3Colors[3] = 0; //hue Secondary
player3Colors[4] = 0; //sat Secondary
player3Colors[5] = 0; //val Secondary
player3Colors[6] = 0; //hue Energy
player3Colors[7] = 0; //sat Energy
player3Colors[8] = 0; //val Energy

globalvar player4Colors;
player4Colors[0] = 0; //hue Prime
player4Colors[1] = 0; //sat Prime
player4Colors[2] = 0; //val Prime
player4Colors[3] = 0; //hue Secondary
player4Colors[4] = 0; //sat Secondary
player4Colors[5] = 0; //val Secondary
player4Colors[6] = 0; //hue Energy
player4Colors[7] = 0; //sat Energy
player4Colors[8] = 0; //val Energy

//Inventory Lists
globalvar HeadInventory;
HeadInventory = ds_list_create();

globalvar TorsoInventory;
TorsoInventory = ds_list_create();

globalvar ArmInventory;
ArmInventory = ds_list_create();

globalvar LegsInventory;
LegsInventory = ds_list_create();

globalvar BackPackInventory;
BackPackInventory = ds_list_create();

//Testing the huge item array
//Seems like the best way to do it, even though its crazy stupid
globalvar ItemArray;
ItemArray[0] = instance_create(0, 0, testHeadObject1);
ItemArray[1] = instance_create(0, 0, testTorsoObject1);
ItemArray[2] = instance_create(0, 0, testLArmObject1);
ItemArray[3] = instance_create(0, 0, testRArmObject1);
ItemArray[4] = instance_create(0, 0, testLegsObject1);
ItemArray[5] = instance_create(0, 0, testBackPackObject1);


//Will probably do something here to read a save file and load inventory, for now, test inventory

ds_list_add(HeadInventory, testHeadObject1);
ds_list_add(HeadInventory, testHeadObject1);
ds_list_add(HeadInventory, testHeadObject1);
ds_list_add(TorsoInventory, testTorsoObject1);
ds_list_add(TorsoInventory, testTorsoObject1);
ds_list_add(ArmInventory, testLArmObject1);
ds_list_add(ArmInventory, testLArmObject1);
ds_list_add(ArmInventory, testRArmObject1);
ds_list_add(LegsInventory, testLegsObject1);
ds_list_add(LegsInventory, testLegsObject1);
ds_list_add(BackPackInventory, testBackPackObject1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This alarm gets called to unlock nodes that the player is on
unlockNodes(MapNodeList[nodePlayerIsAt]);
alarm[10] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == OverMap)
{
    room_goto(InventoryRoom);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="66">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == InventoryRoom)
{
    //if in inventory screen and looking through items to select
    if(view_visible[1])
    {
        view_visible[1] = false;
        selectedInventory = -1;
        inventoryArray = destroyArray(inventoryArray);
    }
    else 
    {
        room_goto(OverMap);
    }
}
else 
{
    room_goto(OverMap);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
