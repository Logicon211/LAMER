<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>InventoryUIItemMPSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = 0;
//Which player is this for
owningPlayer = 0;

inventoryItem = 0;
arrayLocation = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(state == 0)
{
    if(owningPlayer == 0)
    {
        unselectAllItems(inventoryArray1);
    }
    else if(owningPlayer == 1)
    {
        unselectAllItems(inventoryArray2);
    }
    else if(owningPlayer == 2)
    {
        unselectAllItems(inventoryArray3);
    }
    else if(owningPlayer == 3)
    {
        unselectAllItems(inventoryArray4);
    }
    
    state = 1;
    
    var selected = -1;
    //figure out the array index of what was clicked
    if(owningPlayer == 0)
    {
        for(var i = 0; i&lt;array_length_1d(inventoryArray1); i++)
        {
            if(inventoryArray1[i].id == id)
            {
                selected = i;
                break;
            }   
        }
    }
    else if(owningPlayer == 1)
    {
        for(var i = 0; i&lt;array_length_1d(inventoryArray2); i++)
        {
            if(inventoryArray2[i].id == id)
            {
                selected = i;
                break;
            }   
        }
    }
    else if(owningPlayer == 2)
    {
        for(var i = 0; i&lt;array_length_1d(inventoryArray3); i++)
        {
            if(inventoryArray3[i].id == id)
            {
                selected = i;
                break;
            }   
        }
    }
    else if(owningPlayer == 3)
    {
        for(var i = 0; i&lt;array_length_1d(inventoryArray4); i++)
        {
            if(inventoryArray4[i].id == id)
            {
                selected = i;
                break;
            }   
        }
    }
    
    selectedInventory[owningPlayer] = selected;
}
else if (state == 1)
{
    //do code to confirm selection
    //TODO Add a check to figure out which player to load the item slot into
    if(owningPlayer == 0)
    {
        playerLoadOut1[categoryNumber[owningPlayer]] = inventoryItem
    }
    else if(owningPlayer == 1)
    {
        playerLoadOut2[categoryNumber[owningPlayer]] = inventoryItem
    }
    else if(owningPlayer == 2)
    {
        playerLoadOut3[categoryNumber[owningPlayer]] = inventoryItem
    }
    else if(owningPlayer == 3)
    {
        playerLoadOut4[categoryNumber[owningPlayer]] = inventoryItem
    }
    
    if(view_visible[owningPlayer+1])
    {
        view_visible[owningPlayer+1] = false;
        lookingAtItems[owningPlayer] = false;
        selectedInventory = -1;
        
        if(owningPlayer == 0)
        {
            inventoryArray1 = destroyArray(inventoryArray1);
        }
        else if(owningPlayer == 1)
        {
            inventoryArray2 = destroyArray(inventoryArray2);
        }
        else if(owningPlayer == 2)
        {
            inventoryArray3 = destroyArray(inventoryArray3);
        }
        else if(owningPlayer == 3)
        {
            inventoryArray4 = destroyArray(inventoryArray4);
        }
        
        //NEED TO FIGURE OUT WHAT TO DO FOR MULITPLAYER SETUP
        //re display the player with new parts 
        displayPlayers[owningPlayer] = refreshPlayer(displayPlayers[owningPlayer]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,state,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha);
draw_text(x+10,y+10,inventoryItem.name);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>200,200</point>
  </PhysicsShapePoints>
</object>
