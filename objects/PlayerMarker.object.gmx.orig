<<<<<<< HEAD
<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>PlayerMarkerSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>atMapNode = 0; //where the player marker will be (starts at 0)

playerMarker = id; //pass itself to the globalvar

self.x = MapNodeList[atMapNode].x;
self.y = MapNodeList[atMapNode].y;

self.depth = -50;

isMoving = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(speed &gt; 0)
{
    isMoving = true;
    if (point_distance(x,y,moveToNode.x,moveToNode.y) &lt; 13)
    {
        speed = 0;
        x = moveToNode.x;
        y = moveToNode.y;
    }
}
else
{
    isMoving = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var testY = self.y;
var nodeToMoveTo = 0;

for(var i = 0; i &lt; array_length_1d(MapNodeList[atMapNode].nodeConnections); i++)
{
    if(MapNodeList[atMapNode].nodeConnections[i].y &gt; testY and !MapNodeList[atMapNode].nodeConnections[i].isLocked)
    {
        nodeToMoveTo = MapNodeList[atMapNode].nodeConnections[i];
        testY = MapNodeList[atMapNode].nodeConnections[i].y;
    }
}

//if found a node in that direction, move there.
if(nodeToMoveTo != 0 and !isMoving) 
{
    show_debug_message("Node found at " + string(nodeToMoveTo))
    moveToNode = nodeToMoveTo;
    playerMarker.atMapNode = nodeToMoveTo.nodeNumber;
    dir = point_direction(playerMarker.x,playerMarker.y,nodeToMoveTo.x,nodeToMoveTo.y)
    playerMarker.direction = dir;
    playerMarker.speed = 12;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var testX = self.x;
var nodeToMoveTo = 0;

for(var i = 0; i &lt; array_length_1d(MapNodeList[atMapNode].nodeConnections); i++)
{
    if(MapNodeList[atMapNode].nodeConnections[i].x &gt; testX and !MapNodeList[atMapNode].nodeConnections[i].isLocked)
    {
        nodeToMoveTo = MapNodeList[atMapNode].nodeConnections[i];
        testX = MapNodeList[atMapNode].nodeConnections[i].x;
    }
}
//if found a node in that direction, move there.
if(nodeToMoveTo != 0 and !isMoving) 
{
    show_debug_message("Node found at " + string(nodeToMoveTo));
    moveToNode = nodeToMoveTo;
    playerMarker.atMapNode = nodeToMoveTo.nodeNumber;
    dir = point_direction(playerMarker.x,playerMarker.y,nodeToMoveTo.x,nodeToMoveTo.y)
    playerMarker.direction = dir;
    playerMarker.speed = 12;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var testY = self.y;
var nodeToMoveTo = 0;

for(var i = 0; i &lt; array_length_1d(MapNodeList[atMapNode].nodeConnections); i++)
{
    if(MapNodeList[atMapNode].nodeConnections[i].y &lt; testY and !MapNodeList[atMapNode].nodeConnections[i].isLocked)
    {
        nodeToMoveTo = MapNodeList[atMapNode].nodeConnections[i];
        testY = MapNodeList[atMapNode].nodeConnections[i].y;
    }
}

//if found a node in that direction, move there.
if(nodeToMoveTo != 0 and !isMoving) 
{
    show_debug_message("Node found at " + string(nodeToMoveTo))
    moveToNode = nodeToMoveTo;
    playerMarker.atMapNode = nodeToMoveTo.nodeNumber;
    dir = point_direction(playerMarker.x,playerMarker.y,nodeToMoveTo.x,nodeToMoveTo.y)
    playerMarker.direction = dir;
    playerMarker.speed = 12;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var testX = self.x;
var nodeToMoveTo = 0;

for(var i = 0; i &lt; array_length_1d(MapNodeList[atMapNode].nodeConnections); i++)
{
    if(MapNodeList[atMapNode].nodeConnections[i].x &lt; testX and !MapNodeList[atMapNode].nodeConnections[i].isLocked)
    {
        nodeToMoveTo = MapNodeList[atMapNode].nodeConnections[i];
        testX = MapNodeList[atMapNode].nodeConnections[i].x;
    }
}

//if found a node in that direction, move there.
if(nodeToMoveTo != 0 and !isMoving) 
{
    show_debug_message("Node found at " + string(nodeToMoveTo))
    moveToNode = nodeToMoveTo;
    playerMarker.atMapNode = nodeToMoveTo.nodeNumber;
    dir = point_direction(playerMarker.x,playerMarker.y,nodeToMoveTo.x,nodeToMoveTo.y)
    playerMarker.direction = dir;
    playerMarker.speed = 12;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Might change this so something other than ENTER keypress
//Like a GUI button to press, but if it's all keyboard based
//we should probably use a key press

//on ENTER,do battle fight, for now just go as if player won:

//MapNodeList[atMapNode].hasCompleted = true;

if(MapNodeList[atMapNode].hasRadioText)
{
    radText = MapNodeList[atMapNode].radioText;
    radFace = MapNodeList[atMapNode].face; //gets pictures of faces for radio
    nodePlayerIsAt = atMapNode;
    room_goto(RadioRoom);
}
else
{
    //include code to fight? 
    nodePlayerIsAt = atMapNode;
    unlockNodes(MapNodeList[atMapNode]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
=======
<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>PlayerMarkerSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>atMapNode = 0; //where the player marker will be (starts at 0)

playerMarker = id; //pass itself to the globalvar

self.x = MapNodeList[atMapNode].x;
self.y = MapNodeList[atMapNode].y;

self.depth = -50;

isMoving = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(speed &gt; 0)
{
    isMoving = true;
    if (point_distance(x,y,moveToNode.x,moveToNode.y) &lt; 13)
    {
        speed = 0;
        x = moveToNode.x;
        y = moveToNode.y;
    }
}
else
{
    isMoving = false;
}

//LEFT
if(left_check_pressed())
{
    var testX = self.x;
    var nodeToMoveTo = 0;
    
    for(var i = 0; i &lt; array_length_1d(MapNodeList[atMapNode].nodeConnections); i++)
    {
        if(MapNodeList[atMapNode].nodeConnections[i].x &lt; testX and !MapNodeList[atMapNode].nodeConnections[i].isLocked)
        {
            nodeToMoveTo = MapNodeList[atMapNode].nodeConnections[i];
            testX = MapNodeList[atMapNode].nodeConnections[i].x;
        }
    }
    
    //if found a node in that direction, move there.
    if(nodeToMoveTo != 0 and !isMoving) 
    {
        show_debug_message("Node found at " + string(nodeToMoveTo))
        moveToNode = nodeToMoveTo;
        playerMarker.atMapNode = nodeToMoveTo.nodeNumber;
        dir = point_direction(playerMarker.x,playerMarker.y,nodeToMoveTo.x,nodeToMoveTo.y)
        playerMarker.direction = dir;
        playerMarker.speed = 12;
    }
}

//RIGHT
if(right_check_pressed())
{
    var testX = self.x;
    var nodeToMoveTo = 0;
    
    for(var i = 0; i &lt; array_length_1d(MapNodeList[atMapNode].nodeConnections); i++)
    {
        if(MapNodeList[atMapNode].nodeConnections[i].x &gt; testX and !MapNodeList[atMapNode].nodeConnections[i].isLocked)
        {
            nodeToMoveTo = MapNodeList[atMapNode].nodeConnections[i];
            testX = MapNodeList[atMapNode].nodeConnections[i].x;
        }
    }
    //if found a node in that direction, move there.
    if(nodeToMoveTo != 0 and !isMoving) 
    {
        show_debug_message("Node found at " + string(nodeToMoveTo));
        moveToNode = nodeToMoveTo;
        playerMarker.atMapNode = nodeToMoveTo.nodeNumber;
        dir = point_direction(playerMarker.x,playerMarker.y,nodeToMoveTo.x,nodeToMoveTo.y)
        playerMarker.direction = dir;
        playerMarker.speed = 12;
    }
}

//UP
if(up_check_pressed())
{
    var testY = self.y;
    var nodeToMoveTo = 0;
    
    for(var i = 0; i &lt; array_length_1d(MapNodeList[atMapNode].nodeConnections); i++)
    {
        if(MapNodeList[atMapNode].nodeConnections[i].y &lt; testY and !MapNodeList[atMapNode].nodeConnections[i].isLocked)
        {
            nodeToMoveTo = MapNodeList[atMapNode].nodeConnections[i];
            testY = MapNodeList[atMapNode].nodeConnections[i].y;
        }
    }
    
    //if found a node in that direction, move there.
    if(nodeToMoveTo != 0 and !isMoving) 
    {
        show_debug_message("Node found at " + string(nodeToMoveTo))
        moveToNode = nodeToMoveTo;
        playerMarker.atMapNode = nodeToMoveTo.nodeNumber;
        dir = point_direction(playerMarker.x,playerMarker.y,nodeToMoveTo.x,nodeToMoveTo.y)
        playerMarker.direction = dir;
        playerMarker.speed = 12;
    }
}
//DOWN
if(down_check_pressed())
{
    var testY = self.y;
    var nodeToMoveTo = 0;
    
    for(var i = 0; i &lt; array_length_1d(MapNodeList[atMapNode].nodeConnections); i++)
    {
        if(MapNodeList[atMapNode].nodeConnections[i].y &gt; testY and !MapNodeList[atMapNode].nodeConnections[i].isLocked)
        {
            nodeToMoveTo = MapNodeList[atMapNode].nodeConnections[i];
            testY = MapNodeList[atMapNode].nodeConnections[i].y;
        }
    }
    
    //if found a node in that direction, move there.
    if(nodeToMoveTo != 0 and !isMoving) 
    {
        show_debug_message("Node found at " + string(nodeToMoveTo))
        moveToNode = nodeToMoveTo;
        playerMarker.atMapNode = nodeToMoveTo.nodeNumber;
        dir = point_direction(playerMarker.x,playerMarker.y,nodeToMoveTo.x,nodeToMoveTo.y)
        playerMarker.direction = dir;
        playerMarker.speed = 12;
    }
}

//ENTER
if(attack1_check_pressed())
{
        //Might change this so something other than ENTER keypress
    //Like a GUI button to press, but if it's all keyboard based
    //we should probably use a key press
    
    //on ENTER,do battle fight, for now just go as if player won:
    
    //MapNodeList[atMapNode].hasCompleted = true;
    
    if(MapNodeList[atMapNode].hasRadioText)
    {
        radText = MapNodeList[atMapNode].radioText;
        radFace = MapNodeList[atMapNode].face; //gets pictures of faces for radio
        nodePlayerIsAt = atMapNode;
        room_goto(RadioRoom);
    }
    else
    {
        //include code to fight? 
        nodePlayerIsAt = atMapNode;
        unlockNodes(MapNodeList[atMapNode]);
    }
}

if(shield_check())
{
    room_goto(MenuRoom);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var testY = self.y;
var nodeToMoveTo = 0;

for(var i = 0; i &lt; array_length_1d(MapNodeList[atMapNode].nodeConnections); i++)
{
    if(MapNodeList[atMapNode].nodeConnections[i].y &gt; testY and !MapNodeList[atMapNode].nodeConnections[i].isLocked)
    {
        nodeToMoveTo = MapNodeList[atMapNode].nodeConnections[i];
        testY = MapNodeList[atMapNode].nodeConnections[i].y;
    }
}

//if found a node in that direction, move there.
if(nodeToMoveTo != 0 and !isMoving) 
{
    show_debug_message("Node found at " + string(nodeToMoveTo))
    moveToNode = nodeToMoveTo;
    playerMarker.atMapNode = nodeToMoveTo.nodeNumber;
    dir = point_direction(playerMarker.x,playerMarker.y,nodeToMoveTo.x,nodeToMoveTo.y)
    playerMarker.direction = dir;
    playerMarker.speed = 12;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var testX = self.x;
var nodeToMoveTo = 0;

for(var i = 0; i &lt; array_length_1d(MapNodeList[atMapNode].nodeConnections); i++)
{
    if(MapNodeList[atMapNode].nodeConnections[i].x &gt; testX and !MapNodeList[atMapNode].nodeConnections[i].isLocked)
    {
        nodeToMoveTo = MapNodeList[atMapNode].nodeConnections[i];
        testX = MapNodeList[atMapNode].nodeConnections[i].x;
    }
}
//if found a node in that direction, move there.
if(nodeToMoveTo != 0 and !isMoving) 
{
    show_debug_message("Node found at " + string(nodeToMoveTo));
    moveToNode = nodeToMoveTo;
    playerMarker.atMapNode = nodeToMoveTo.nodeNumber;
    dir = point_direction(playerMarker.x,playerMarker.y,nodeToMoveTo.x,nodeToMoveTo.y)
    playerMarker.direction = dir;
    playerMarker.speed = 12;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var testY = self.y;
var nodeToMoveTo = 0;

for(var i = 0; i &lt; array_length_1d(MapNodeList[atMapNode].nodeConnections); i++)
{
    if(MapNodeList[atMapNode].nodeConnections[i].y &lt; testY and !MapNodeList[atMapNode].nodeConnections[i].isLocked)
    {
        nodeToMoveTo = MapNodeList[atMapNode].nodeConnections[i];
        testY = MapNodeList[atMapNode].nodeConnections[i].y;
    }
}

//if found a node in that direction, move there.
if(nodeToMoveTo != 0 and !isMoving) 
{
    show_debug_message("Node found at " + string(nodeToMoveTo))
    moveToNode = nodeToMoveTo;
    playerMarker.atMapNode = nodeToMoveTo.nodeNumber;
    dir = point_direction(playerMarker.x,playerMarker.y,nodeToMoveTo.x,nodeToMoveTo.y)
    playerMarker.direction = dir;
    playerMarker.speed = 12;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var testX = self.x;
var nodeToMoveTo = 0;

for(var i = 0; i &lt; array_length_1d(MapNodeList[atMapNode].nodeConnections); i++)
{
    if(MapNodeList[atMapNode].nodeConnections[i].x &lt; testX and !MapNodeList[atMapNode].nodeConnections[i].isLocked)
    {
        nodeToMoveTo = MapNodeList[atMapNode].nodeConnections[i];
        testX = MapNodeList[atMapNode].nodeConnections[i].x;
    }
}

//if found a node in that direction, move there.
if(nodeToMoveTo != 0 and !isMoving) 
{
    show_debug_message("Node found at " + string(nodeToMoveTo))
    moveToNode = nodeToMoveTo;
    playerMarker.atMapNode = nodeToMoveTo.nodeNumber;
    dir = point_direction(playerMarker.x,playerMarker.y,nodeToMoveTo.x,nodeToMoveTo.y)
    playerMarker.direction = dir;
    playerMarker.speed = 12;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Might change this so something other than ENTER keypress
//Like a GUI button to press, but if it's all keyboard based
//we should probably use a key press

//on ENTER,do battle fight, for now just go as if player won:

//MapNodeList[atMapNode].hasCompleted = true;

/*if(MapNodeList[atMapNode].hasRadioText)
{
    radText = MapNodeList[atMapNode].radioText;
    radFace = MapNodeList[atMapNode].face; //gets pictures of faces for radio
    nodePlayerIsAt = atMapNode;
    room_goto(RadioRoom);
}
else
{
    //include code to fight? 
    nodePlayerIsAt = atMapNode;
    unlockNodes(MapNodeList[atMapNode]);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
>>>>>>> b35d97a2b437c35325d8d9b77d0eaef6ff2f7c2f
